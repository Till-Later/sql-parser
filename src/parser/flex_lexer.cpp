#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 156
#define YY_END_OF_BUFFER 157
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1070] =
    {   0,
        0,    0,  153,  153,    2,    2,  157,  155,    4,    4,
      155,  155,  145,  151,  145,  145,  148,  145,  145,  145,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  145,  153,  154,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  140,    0,    1,  148,
      147,  146,  142,  141,  139,  143,  150,  150,  150,  150,

      150,  150,  118,  150,  119,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      120,  150,  150,  121,  122,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  123,  124,  125,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  126,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  144,  153,  152,
        2,    2,    2,    2,    1,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  149,  146,  104,  150,  105,  150,
      150,  106,  150,  107,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  108,  150,  130,  150,  150,

      150,  150,  150,  150,  150,  150,  150,  109,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  110,  150,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  111,  150,  150,  112,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  113,  150,  150,  114,  150,
      150,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  115,  150,  150,  150,  150,  116,  150,  150,
      150,  150,  117,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  150,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,  150,

      150,  150,  150,  150,  150,   76,  150,   77,   78,  150,
      150,  150,  150,  150,   79,  150,  150,  150,  150,   80,
      150,  150,  150,   81,   82,  150,  150,  150,  150,  150,
      150,  150,   83,  150,   84,   85,  150,  150,   86,  150,
       87,  129,  150,  150,  150,  150,  150,  150,   88,  150,
       89,   90,   91,  150,   93,  150,   94,  150,  150,  150,
      150,   95,  150,  150,  150,  150,  150,   96,  150,  150,
      150,  150,  150,  150,  150,  150,  150,   97,  150,  150,
      150,  150,   98,   99,  100,  150,  133,  150,  150,  150,
      150,  150,  150,  150,  150,  101,  150,  102,  150,  103,

      132,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,   56,   57,  150,   58,  150,  136,
      150,  150,  150,  150,  150,  150,   59,  150,  150,  150,
       60,  150,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  134,   61,  150,   62,  150,   92,  150,   63,   64,
      150,  150,  150,  150,   65,   66,   67,   68,  150,  131,
      150,  150,  150,   69,   70,  150,  150,  150,  150,  150,
       71,  150,  150,  150,  150,  150,  150,   72,  150,  150,
      150,  150,   73,  150,  150,  150,   74,  150,  150,  150,
       75,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,   31,
      150,  150,   32,  138,  150,   33,  150,  150,   34,  150,
       35,  150,   36,   37,   38,  150,   39,  150,  150,   41,
       42,   43,   44,  150,  150,   45,  128,  150,  150,   46,
      150,  150,  150,   47,  150,  150,   48,  127,   49,   50,

      150,   51,  150,  150,  150,  150,   52,   53,   54,   55,
      150,  150,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   15,   16,   17,   18,
       19,  150,   20,  150,  150,   21,   22,   40,   23,  150,
       24,  150,  150,   25,   26,  150,  150,   27,   28,  150,
      150,  150,  150,   29,   30,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  150,   10,   11,  150,   12,  150,
       13,  137,  150,  150,  150,   14,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  150,    7,
      150,    8,    9,  150,    2,    2,    2,    2,    2,    2,
        5,    6,  150,    2,    2,    2,  135,    2,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,    1,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        6,    1,    6,    6,   40,    1,   41,   42,   43,   44,

       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,    6,   67,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[68] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1077] =
    {   0,
        0,    0,  492,  468,   67,    0,  464, 4255,  133,  135,
      445,    0, 4255, 4255,  131,  442,  133,  132,  439,  426,
      129,  129,  137,  135,  145,  196,  176,  184,  217,  124,
      141,  201,  213,  238,  255,  250,    0,  262,  267,  310,
      307,  191,  256,  144,  365,    0,  411,    0,  200,  212,
      396,  352,    0,    0,  212,  340,  207,  247,  337,  325,
      368,  435,  489,  541,  589,  641,  302,  364,  689,  366,
      249,  427,  432,  741,  789,  453,  326,  441,  839,  891,
      497,  543,  501,  365,  239,  295, 4255,  256, 4255,  309,
      245,  237, 4255, 4255, 4255, 4255,    0,  147,  178,  296,

      384,  195,  249,  558,    0,  364,  289,  548,  379,  291,
      423,  598,  482,  301,  360,  358,  389,  442,  704,  437,
      441,  440,  443,  476,  484,  488,  497,  535,  506,  524,
        0,  546,  542,  592,  549,  561,  555,  592,  589,  633,
      598,  604,  608,  604,  628,  640,  653,  649,    0,  653,
      638,  642,  663,  683,  685,  663,  659,  670,  713,  675,
      678,  699,  708,  699,  731,  707,  705,  716,  749,  745,
      744,  740,  746,  756,  748,  745,  771, 4255,    0, 4255,
        0,  340,    0,  203,    0,  336,  190,  161,    0,    0,
        0,    0,  773,  804,  791,  828,  845,  827,  858,  897,

      799,  882,  907,  933,  853,  932,  935,  987,  951,  970,
      975,  989,  946, 1006, 1056, 1018, 1035, 1037, 1019, 1041,
     1043, 1075, 1079, 1091, 1100, 1097, 1101, 1110, 1123, 1172,
     1133, 1158, 1119, 1155, 1168, 1211, 1177, 1212, 1226, 1210,
     1229, 1243, 1245, 1254, 1240, 1279, 1269, 1275, 1297, 1294,
     1309, 1283, 1327, 1328, 1342, 1333, 1319, 1368, 1381, 1365,
     1363, 1373, 1386, 1396, 1422, 1432, 1404, 1437, 1440, 1435,
     1450, 1456, 1458,    0, 4255,  145,    0,  774,    0,  781,
      788,    0,  811,    0,  842,  853,  863,  886, 1419,  897,
      920,  939,  942,  985,  982,    0, 1000,    0, 1073, 1108,

     1152, 1166, 1173, 1181, 1209, 1253, 1280,    0, 1290, 1308,
     1354, 1373, 1395, 1448, 1458, 1473, 1490,    0, 1481, 1483,
     1494, 1476, 1490, 1490, 1480, 1483, 1495, 1492, 1504, 1506,
     1507, 1514, 1492, 1500,    0, 1495, 1511, 1508, 1516, 1529,
     1524, 1525, 1514, 1517, 1524,    0, 1536, 1531, 1531, 1546,
     1547, 1552, 1540, 1539, 1547, 1560, 1543, 1557, 1554, 1562,
     1553, 1564,    0, 1547, 1551, 1553, 1562,    0, 1567, 1564,
     1571, 1581,    0, 1575, 1594, 1587, 1576, 1602, 1591, 1585,
     1604, 1586, 1594, 1601, 1609, 1602,    0,  140, 1618, 1620,
     1623, 1632, 1644, 1633, 1661, 1635, 1646, 1672, 1669, 1690,

     1700, 1702, 1685, 1686, 1711, 1734, 1736, 1648, 1735, 1739,
     1744, 1745, 1760, 1769, 1770, 1773, 1779, 1784, 1785, 1798,
     1813, 1801, 1810, 1824, 1827, 1829, 1839, 1823, 1862, 1852,
     1867, 1877, 1881, 1890, 1892, 1896, 1898, 1921, 1926, 1942,
     1929, 1930, 1931, 1944, 1947, 1966, 1960, 1983, 1965, 1984,
     1996, 2001, 2006, 2017, 2018, 2027, 2036, 2039, 2050, 2055,
     2058, 2040, 2071, 2080, 2081, 2093, 2106, 2092, 2096, 2122,
     2130, 2109, 2124, 2135, 2145, 2148, 2158, 2159, 2160, 2163,
     2188, 2176, 2189, 2184, 2197, 2212, 2213, 2241, 2227, 2242,
     2243, 2230, 2283, 2266, 2267, 2292, 2295, 2304, 1609, 1664,

     1794, 1799, 1851, 1879, 1893,    0, 1959,    0,    0, 1964,
     2001, 2001, 2047, 2080,    0, 2147, 2186, 2213, 2249, 2245,
     2277, 2287, 2289,    0,    0, 2288, 2289, 2290, 2292, 2320,
     2324, 2321,    0, 2314,    0,    0, 2339, 2325,    0, 2328,
        0,    0, 2338, 2327, 2322, 2332, 2333, 2347,    0, 2343,
        0,    0,    0, 2337,    0, 2346,    0, 2354, 2343, 2352,
     2346,    0, 2363, 2366, 2356, 2357, 2363,    0, 2378, 2379,
     2370, 2370, 2374, 2393, 2383, 2383, 2396,    0, 2395, 2395,
     2400, 2393,    0,    0, 2390, 2392,    0, 2409, 2399, 2393,
     2415, 2397, 2411, 2414, 2412,    0, 2404,    0, 2423,    0,

        0, 2424, 2432, 2428, 2429, 2453, 2454, 2457, 2458, 2469,
     2467, 2468, 2483, 2482, 2499, 2507, 2497, 2508, 2525, 2520,
     2533, 2541, 2556, 2573, 2558, 2550, 2574, 2579, 2591, 2604,
     2592, 2607, 2590, 2632, 2616, 2630, 2633, 2641, 2644, 2662,
     2645, 2646, 2667, 2670, 2678, 2681, 2686, 2696, 2707, 2711,
     2719, 2702, 2730, 2735, 2736, 2740, 2753, 2745, 2769, 2761,
     2770, 2771, 2799, 2794, 2784, 2822, 2805, 2810, 2835, 2836,
     2833, 2858, 2868, 2859, 2876, 2872, 2873, 2890, 2902, 2926,
     2901, 2907, 2932, 2913, 2935, 2930, 2941, 2944, 2956, 2947,
     2980, 2966, 2990, 2969, 2984, 3012, 2981, 2995, 3009, 3018,

     3020, 3023, 3024, 3035,    0,    0, 2422,    0, 2582,    0,
     2587, 2648, 2743, 2759, 2814, 2838,    0, 2829, 2870, 2912,
        0, 3015, 3006, 3021, 3049, 3052, 3038, 3039, 3044, 3056,
     3065,    0,    0, 3057,    0, 3064,    0, 3053,    0,    0,
     3054, 3072, 3059, 3067,    0,    0,    0,    0, 3075,    0,
     3081, 3075, 3068,    0,    0, 3084, 3073, 3075, 3089, 3088,
        0, 3098, 3101, 3099, 3088, 3107, 3111, 3094, 3096, 3097,
     3118, 3121,    0, 3118, 3121, 3122,    0, 3109, 3130, 3131,
        0, 3128, 3131, 3140, 3132, 3137, 3142, 3143, 3166, 3171,
     3181, 3185, 3156, 3177, 3199, 3210, 3194, 3200, 3211, 3225,

     3234, 3229, 3233, 3235, 3248, 3251, 3269, 3266, 3274, 3279,
     3297, 3283, 3285, 3288, 3307, 3309, 3318, 3328, 3319, 3333,
     3351, 3337, 3341, 3342, 3352, 3363, 3367, 3377, 3392, 3376,
     3381, 3382, 3386, 3407, 3417, 3405, 3411, 3416, 3445, 3450,
     3449, 3440, 3479, 3466, 3471, 3461, 3480, 3494, 3515, 3483,
     3504, 3520, 3509, 3523, 3525, 3537, 3548, 3534, 3146,    0,
     3275, 3323, 3412,    0, 3521,    0, 3534, 3534,    0, 3556,
        0, 3560,    0,    0,    0, 3563,    0, 3556, 3554,    0,
        0,    0,    0, 3560, 3574,    0,    0, 3570, 3582,    0,
     3564, 3582, 3563,    0, 3588, 3589, 3574,    0,    0,    0,

     3582,    0, 3595, 3597, 3596, 3582,    0,    0,    0,    0,
     3585, 3592, 3602, 3603, 3608, 3607, 3619, 3611, 3636, 3632,
     3642, 3653, 3637, 3651, 3645, 3676, 3661, 3677, 3682, 3685,
     3686, 3690, 3707, 3691, 3694, 3715, 3716, 3731, 3719, 3720,
     3725, 3748, 3757, 3756, 3759, 3761, 3765, 3769, 3793, 3799,
     3807, 3790, 3802, 3805, 3823, 3811, 3839, 3845, 3844, 3836,
     3833, 3847, 3855, 3861, 3876, 3877,    0,    0,    0,    0,
        0, 3764,    0, 3773, 3858,    0,    0,    0,    0, 3881,
        0, 3872, 3887,    0,    0, 3875, 3887,    0,    0, 3882,
     3890, 3884, 3901,    0,    0, 3907, 3909, 3910, 3913, 3915,

     3943, 3918, 3921, 3931, 3932, 3944, 3947, 3949, 3955, 3961,
     3972, 3977, 3983, 3986, 4000, 3989, 3987, 3998, 4026, 4021,
     4017, 4011, 4023, 4035, 3986,    0,    0, 4025,    0, 4036,
        0,    0, 4031, 4041, 4050,    0, 4057, 4060, 4063, 4071,
     4065, 4075, 4069, 4074, 4097, 4100, 4105, 4103, 4106,    0,
     4094,    0,    0, 4104, 4119, 4128, 4129, 4131, 4134, 4153,
        0,    0, 4128, 4140, 4142, 4159,    0, 4145, 4255, 4224,
     4229,  135, 4234, 4239, 4244, 4249
    } ;

static const flex_int16_t yy_def[1077] =
    {   0,
     1069,    1, 1070, 1070, 1069,    5, 1069, 1069, 1069, 1069,
     1069, 1071, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1069, 1073, 1069, 1074, 1074, 1069,
     1074, 1075, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1076, 1076,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1074, 1069, 1069, 1071, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1069, 1073, 1069,
     1074, 1074, 1074, 1075, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62, 1074, 1069, 1069, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1074, 1074,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1072, 1072,
     1072, 1072, 1072, 1072,   62,   62,   62,   62,   62,   62,
     1072, 1072, 1072,   62,   62,   62, 1072,   62,    0, 1069,
     1069, 1069, 1069, 1069, 1069, 1069
    } ;

static const flex_int16_t yy_nxt[4323] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   37,   44,   37,    8,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   37,   44,   37,   45,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   77,   84,   77,   48,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       77,   84,   77,   85,   86,   86,   86,   86,   89,   97,
       90,   92,   90,   93,   94,   98,  104,   99,  111,  388,
      106,  136,  112,  100,  276,  101,  113,  107,  137,  102,
      103,  177,  114,  277,  108,  115,  105,  109,  110,  116,
      388,  117,   98,  104,   99,  111,  118,  106,  136,  112,
      100,  119,  101,  113,  107,  137,  102,  103,  177,  114,
      277,  108,  115,  105,  109,  110,  116,  128,  117,  187,

      126,  182,   86,  118,  173,  129,  127,  387,  119,  120,
      278,  130,  174,   86,   86,  188,  186,  121,  138,  185,
      122,  186,  139,  123,  128,  283,  124,  126,  140,  125,
      141,  173,  129,  127,  142,  131,  120,  278,  130,  174,
      143,  132,  133,  134,  121,  138,  276,  122,  135,  139,
      123,  144,  283,  124,   91,  140,  125,  141,  189,  190,
      275,  142,  131,  152,  284,  145,  233,  143,  132,  133,
      134,  146,  147,  148,  153,  135,  175,  176,  144,  155,
      154,  149,  158,  156,  159,  150,  193,  160,  151,  157,
      152,  284,  145,  233,  161,  162,   86,   86,  146,  147,

      148,  153,  290,  175,  176,  274,  155,  154,  149,  158,
      156,  159,  150,  193,  160,  151,  157,   92,   90,  193,
      279,  161,  162,  163,  164,  296,  222,  165,  280,  290,
      166,  167,  223,  170,  305,  171,  192,  168,  172,  193,
      169,  182,   86,  193,  188,  186,  193,  279,  191,  187,
      163,  164,  296,  222,  165,  280,  181,  166,  167,  223,
      170,  305,  171,  193,  168,  172,  193,  169,  181,  181,
      193,  181,  181,  181,  181,  181,  181,  224,  181,  181,
      181,  193,  273,  193,  194,  225,  195,  306,  288,  307,
      193,  226,  196,  232,  197,  289,  294,  281,  198,  199,

      282,  193,  193,  193,  224,  308,  295,  183,  193,  273,
      193,  194,  225,  195,  306,  288,  307,  180,  226,  196,
      232,  197,  289,  294,  281,  198,  199,  282,  193,  193,
      193,  178,  308,  295,  181,  181,  181,   96,  181,  181,
      181,  181,  181,  181,  234,  181,  181,  181,  235,  237,
       95,   91,  200,  238,  236,  297,   87,  309,  251,  239,
      298,  315,  252, 1069,  193,  316,  248,  317,  253,  193,
      193,  234,  201,  318,   47,  235,  237,  249,  193,  200,
      238,  236,  297,  250,  309,  251,  239,  298,  315,  252,
      193,  193,  316,  248,  317,  253,  193,  193,   47,  201,

      318,  181,  202,  319,  249,  193,  193, 1069,  320,  203,
      250, 1069,  303,  304,  193,  321,  204,  193,  193,  205,
      206,  271,  272,  266,  322,  267,  193, 1069,  268,  202,
      319, 1069,  325,  193,  193,  320,  203, 1069,  193,  303,
      304,  193,  321,  204, 1069,  193,  205,  206,  271,  272,
      266,  322,  267,  193,  207,  268,  269,  326,  208,  325,
      193,  193,  209, 1069,  270,  193,  323,  327,  210,  324,
      328,  211,  291,  292,  293,  333,  285,  286,  193, 1069,
      193,  207,  334,  269,  326,  208, 1069,  193, 1069,  209,
      287,  270,  335,  323,  327,  210,  324,  328,  211,  291,

      292,  293,  333,  285,  286,  193,  193,  193,  329,  334,
      336,  299,  337,  212,  338,  213,  300,  287,  330,  335,
      214, 1069,  301,  331,  332,  215,  193, 1069,  342,  302,
      343, 1069, 1069,  193,  344,  329,  345,  336,  299,  337,
      212,  338,  213,  300, 1069,  330,  339,  214,  340,  301,
      331,  332,  215,  193,  216,  342,  302,  343,  193,  341,
      346,  344,  217,  345,  347,  218,  348,  349,  219,  350,
      351,  220,  352,  339,  221,  340,  353, 1069,  193, 1069,
     1069,  216,  358,  359, 1069,  193,  341,  346, 1069,  217,
      360,  347,  218,  348,  349,  219,  350,  351,  220,  352,

      354,  221,  364,  353,  355,  193,  193,  227,  365,  358,
      359,  356,  366,  228,  229,  230,  357,  360, 1069,  310,
      231,  311,  367,  368,  371,  312,  193,  354,  361,  364,
      372,  355,  313,  193,  227,  365,  314,  362,  356,  366,
      228,  229,  230,  357,  373,  363,  310,  231,  311,  367,
      368,  371,  312,  193,  240,  361,  369,  372,  193,  313,
      378,  379,  374,  314,  362,  384,  376,  370,  241,  377,
      380,  373,  363,  382,  242,  243,  381,  385,  193, 1069,
     1069,  240,  375,  369,  386,  193,  383,  378,  379,  374,
      193,  499,  384,  376,  370,  241,  377,  380,  500, 1069,

      382,  242,  243,  381,  385,  193,  193,  244,  193,  375,
      193,  386,  501,  383, 1069,  245,  193,  193,  499,  246,
      389,  193,  247,  390,  502,  500,  193, 1069,  193, 1069,
     1069, 1069, 1069,  193,  244,  193,  193,  193, 1069,  501,
     1069,  193,  245,  193,  193,  193,  246,  389,  193,  247,
      390,  502,  391,  193,  254,  193,  255,  395,  393,  256,
      392,  394,  193,  193,  193,  193,  257,  258,  193,  503,
      406,  193,  193,  396,  504,  193,  193, 1069, 1069,  391,
      407,  254,  193,  255,  395,  393,  256,  392,  394,  193,
      193,  193,  193,  257,  258,  193,  503,  406,  505,  193,

      396,  504,  193,  193,  259,  260,  400,  407,  261,  193,
      506,  262,  263,  401,  193,  397,  398,  193,  264,  193,
      402,  265,  193, 1069,  193,  505,  193,  509,  193,  399,
     1069,  259,  260,  400,  193,  261, 1069,  506,  262,  263,
      401,  193,  397,  398,  193,  264,  193,  402,  265,  193,
      193,  193,  193,  510,  509,  193,  399,  403,  404,  405,
     1069,  193,  420,  193,  511, 1069,  408,  409,  193,  193,
      193,  193,  410, 1069,  512, 1069,  193,  193, 1069,  193,
      510,  415,  416,  193,  403,  404,  405,  193,  193,  420,
      193,  511,  193,  408,  409,  193,  193,  193,  513,  410,

      411,  512,  418,  417,  193,  412,  193,  193,  415,  416,
      193,  413,  193,  514,  193,  193, 1069,  515,  414,  193,
      419,  421, 1069,  193,  193,  513,  193,  411, 1069,  418,
      417,  193,  412,  193,  193,  193,  193, 1069,  413,  193,
      514, 1069,  427,  193,  515,  414, 1069,  419,  421,  430,
      193,  193,  193,  193,  193,  193,  193, 1069,  193,  428,
      193, 1069,  193,  193,  429, 1069, 1069,  432,  431,  427,
      193,  422,  193,  423,  193, 1069,  430,  424,  193,  193,
      193,  193,  193,  193,  425,  193,  428,  193,  426, 1069,
     1069,  429,  193,  193,  432,  431,  193,  516,  422,  193,

      423,  193,  433, 1069,  424,  193,  434,  193,  193, 1069,
     1069,  425,  193, 1069,  193,  426,  193,  193,  193,  193,
      193,  517,  435,  193,  516,  436,  437,  193,  193,  433,
      438,  439, 1069,  434,  193,  193,  193,  193,  193,  193,
      193,  193, 1069,  193,  193,  193, 1069,  193,  517,  435,
      193,  440,  436,  437,  193,  193,  447,  438,  439,  445,
      193,  193, 1069,  193,  193,  193, 1069,  193, 1069,  518,
      193, 1069,  193,  448,  193,  193, 1069,  193,  440,  446,
     1069,  520, 1069,  447,  519,  193,  445,  193,  441,  193,
      521,  449,  193,  450,  193,  193,  518,  193,  442,  193,

      448, 1069,  193,  443,  444,  193,  446,  454,  520,  193,
     1069,  519,  193,  522,  193,  441,  193,  521,  449,  193,
      450,  193,  193,  523,  451,  442,  452,  193,  193,  193,
      443,  444,  193, 1069,  454, 1069,  193,  453,  455, 1069,
      522,  193,  457,  193, 1069, 1069,  193,  193,  193,  193,
      523,  451,  456,  452,  193,  193,  193,  193,  460, 1069,
      193,  458,  193,  193,  453,  455,  193,  459, 1069,  457,
      193,  193,  461,  193,  193,  193,  193,  193, 1069,  456,
      193,  524,  193, 1069,  193,  460,  193,  193,  458,  193,
      193,  193,  193,  193,  459,  462,  193,  525,  193,  461,

      193,  463,  470,  526,  193,  464,  193,  193,  524,  193,
      465,  466,  193,  193,  193,  467,  193, 1069,  193,  193,
      193, 1069,  462,  193,  525,  527,  193,  193,  463,  470,
      526,  193,  464,  193,  193,  468,  193,  465,  466,  193,
      469,  193,  467,  193,  193,  193,  193,  193,  472,  477,
      193,  471,  527,  193, 1069, 1069,  193,  473,  193,  193,
      476,  193,  468,  193,  193,  193,  474,  469, 1069,  528,
      193,  193,  193,  193,  475,  472,  477,  193,  471,  193,
      193,  478,  193,  193,  473,  193,  193,  476,  481,  480,
      483,  193,  193,  474, 1069,  479,  528,  193,  193,  482,

      193,  475,  193,  193,  529,  193,  193,  193,  478,  193,
      193,  484,  193,  193, 1069,  481,  480,  483,  193,  530,
      490,  193,  479,  193,  485,  193,  482,  193, 1069,  193,
      193,  529,  193,  193,  507,  486,  508,  193,  484,  193,
      193,  193, 1069, 1069, 1069,  193,  530,  490,  193,  193,
      193,  485,  494,  488,  193,  487,  489,  193,  491,  193,
      193,  507,  486,  508,  492,  495,  193,  496,  193,  193,
      493,  498,  193,  193,  193,  193,  193,  193,  531,  494,
      488,  193,  487,  489,  193,  491,  193,  193,  497,  532,
      533,  492,  495,  193,  496,  193,  193,  493,  498,  193,

      193,  193,  193,  534,  193,  531,  535,  536,  537,  538,
      539,  540,  541,  542,  193,  497,  532,  533,  543,  544,
      193,  545,  193,  546,  547,  550,  551,  552,  553,  554,
      534,  548,  555,  535,  536,  537,  538,  539,  540,  541,
      542,  549,  556,  557,  558,  543,  544,  559,  545,  560,
      546,  547,  550,  551,  552,  553,  554,  561,  548,  555,
      562,  563,  564,  565,  566,  567,  568,  569,  549,  556,
      557,  558,  570,  571,  559,  572,  560,  573,  574,  575,
      576,  577,  578,  579,  561,  580,  581,  562,  563,  564,
      565,  566,  567,  568,  569,  582,  583,  584,  585,  570,

      571,  586,  572,  591,  573,  574,  575,  576,  577,  578,
      579,  587,  580,  581,  589,  592,  590,  593,  594,  595,
      588,  596,  582,  583,  584,  585,  597,  598,  586,  600,
      591,  599,  601, 1069, 1069,  193, 1069,  602,  587,  705,
      193,  589,  592,  590,  593,  594,  595,  588,  596,  603,
      193, 1069,  193,  597,  598,  193,  600,  193,  599,  601,
      193,  193,  193,  193,  602,  193,  705,  193,  604,  193,
      193, 1069,  193,  606,  605, 1069,  603,  193,  193,  193,
     1069,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1069,  193,  607,  706,  604,  193,  193,  193,  193,

      606,  605,  193,  193,  608,  193,  193,  193,  193,  193,
      193,  614,  193,  193,  609,  610,  193,  611,  613,  193,
      607,  706,  193,  193, 1069,  193, 1069,  193,  193,  193,
      193,  608,  612,  193,  193, 1069,  193,  193,  614,  193,
     1069,  609,  610,  615,  611,  613,  193,  616,  193,  193,
      193,  193,  618,  193,  193,  193,  193, 1069,  620,  612,
     1069,  193,  193, 1069,  193, 1069,  193,  617,  619, 1069,
      615,  193,  193,  193,  616,  193,  193,  621,  193,  618,
      193,  193,  193,  193,  623,  620,  193,  624,  193,  193,
      193, 1069,  622,  626,  617,  619,  193,  193,  193,  193,

      193,  193,  628,  193,  621,  625,  193,  193,  193,  193,
      193,  623,  627,  193,  624,  193,  193,  193,  630,  622,
      626,  193,  193,  193,  193,  631,  629,  193,  193,  628,
      193,  707,  625,  193,  193,  193,  708,  193,  193,  627,
      636,  193,  193,  193,  193,  630,  193,  193,  193,  193,
      193,  633,  631,  629,  193,  632,  193,  193,  707,  634,
      193,  193,  193,  708,  193,  193,  193,  636,  193,  193,
      635,  193, 1069,  193,  193,  637,  193,  193,  633,  193,
     1069,  709,  632,  193,  193, 1069,  634,  193,  193,  193,
     1069,  193,  638,  193,  193,  640,  193,  635,  193,  193,

     1069,  639,  637,  193,  193,  710,  193,  193,  709,  193,
      711,  193,  642,  193,  193,  193,  193,  643,  193,  638,
     1069,  193,  640,  641, 1069,  193,  193,  193,  639,  193,
      644,  193,  710,  193,  193,  193,  193,  711,  193,  642,
      193,  193,  193,  193,  643,  193,  648,  649,  650,  646,
      641,  645, 1069, 1069,  193, 1069,  193,  644,  193,  193,
      193,  651,  193,  193,  193,  193,  193,  193,  193,  647,
      193,  652,  712,  648,  649,  650,  646,  193,  645,  193,
      653,  193,  656,  193,  193,  193,  193, 1069,  651,  713,
      193,  193,  654,  193,  193,  193,  647,  193,  652,  712,

      193,  193,  193,  193,  193,  657,  193,  653,  193,  656,
      193,  193,  658,  193,  659,  655,  713, 1069,  193,  654,
      193,  193,  714,  193,  193,  660, 1069,  193,  193,  193,
      193,  715,  657,  193,  193,  193,  661, 1069,  193,  658,
      193,  659,  655,  193,  193,  193, 1069,  193,  193,  714,
      193,  662,  660,  193,  193,  193,  193,  668,  715,  663,
      193,  193,  193,  661,  193,  193, 1069,  193, 1069,  664,
      193,  193,  193,  193,  665,  193,  193,  193,  662,  716,
      193,  193,  193,  193,  668,  666,  663,  193,  669,  667,
     1069,  193,  193,  670,  193,  193,  664,  193,  193,  193,

      193,  665,  193,  193,  193,  674,  716,  671,  193,  193,
      193,  717,  666,  193,  193,  669,  667,  193,  193,  193,
      670,  672,  193,  193,  193,  193,  678, 1069,  675,  193,
      193,  673,  674,  193,  671,  193,  193,  193,  717,  193,
      193,  193,  676,  193,  193,  193,  193,  193,  672, 1069,
      193,  679,  680,  678,  677,  675,  193,  193,  673,  193,
      193,  193,  193, 1069, 1069,  193,  193,  193,  193,  676,
      193,  718,  193,  193,  193,  193,  193,  193,  679,  680,
      193,  677,  193,  681,  684,  193,  193, 1069,  193,  193,
      682,  683,  193,  193,  193,  193,  193,  193,  718,  193,

      193,  688,  193,  193,  193,  193,  193,  193,  686,  193,
      681,  684,  193,  193,  193,  687,  685,  682,  683,  719,
      193,  193,  193,  193,  193,  193,  193,  193,  688,  193,
      690, 1069,  193,  193,  193,  686, 1069, 1069,  689,  691,
      193,  193,  687,  685,  193,  720,  719,  193,  193,  193,
      193, 1069,  193,  193,  694,  695,  193,  690,  193,  193,
      193,  193,  721,  697,  193,  689,  691,  193,  692,  696,
      693,  193,  720, 1069,  193,  722,  193,  193,  193,  193,
      193,  694,  695,  193,  193,  193,  193,  193, 1069,  721,
      697,  193,  723, 1069,  193,  692,  696,  693,  698,  700,

      193,  699,  722,  193,  193,  193,  193,  193,  724,  193,
      193,  193,  193,  725, 1069,  703,  726,  727,  701,  723,
      193,  193,  702,  728,  729,  698,  700,  193,  699,  193,
      193,  193,  193,  730,  704,  724,  193,  731,  732,  193,
      725,  193,  703,  726,  727,  701,  733,  193,  193,  702,
      728,  729,  734,  735,  736,  737,  193,  738,  739,  193,
      730,  704,  740,  741,  731,  732,  742,  744,  193,  745,
      746,  747,  750,  733,  748,  749,  751,  743,  752,  734,
      735,  736,  737,  753,  738,  739,  754,  755,  756,  740,
      741,  757,  758,  742,  744,  759,  745,  746,  747,  750,

      760,  748,  749,  751,  743,  752,  761,  762,  763,  764,
      753,  765,  766,  754,  755,  756,  767,  768,  757,  758,
      769,  770,  759,  771,  772,  773,  774,  760,  775,  776,
      777,  778,  779,  761,  762,  763,  764,  780,  765,  766,
      781,  193, 1069,  767,  768,  193,  193,  769,  770,  193,
      771,  772,  773,  774,  782,  775,  776,  777,  778,  779,
      859,  193,  783, 1069,  780,  784,  785,  781,  193,  193,
      193,  193,  193,  193,  788,  193,  193, 1069, 1069, 1069,
      787,  782,  789,  786,  193,  193,  193,  859,  193,  783,
      193,  193,  784,  785,  193,  193,  193,  193,  193,  193,

      193,  788,  193,  791,  193,  193,  193,  787,  790,  789,
      786,  193,  193,  193,  193, 1069,  193,  193,  193,  193,
      193,  193,  193, 1069,  193,  193,  193,  193,  794,  792,
      791,  193,  193,  193,  193,  790,  193,  193, 1069,  793,
     1069,  193,  193,  193,  193,  193,  193,  193, 1069,  795,
      193,  193,  193,  796,  798,  794,  792,  193,  193, 1069,
     1069,  193,  193,  193,  193,  797,  793,  193, 1069,  193,
      193,  193,  193,  193,  802,  193,  795,  193,  193,  801,
      796,  798, 1069, 1069,  193,  193,  799,  193,  800,  193,
      193,  193,  797,  193,  193,  193,  193,  193, 1069,  860,

      193,  802,  193,  807,  861,  193,  801,  193,  193,  193,
      193,  193, 1069,  799,  193,  800,  193,  193,  193,  803,
      193,  193,  193,  193,  193,  805,  860,  193,  193,  193,
      807,  861,  804,  809,  193,  193,  193,  193,  193,  806,
     1069,  193, 1069,  193,  193,  808,  803,  193,  193,  193,
      193,  193,  805,  193,  193,  193,  193, 1069,  193,  804,
      809,  193,  193,  193,  862,  810,  806,  193,  193,  193,
      193,  193,  808,  812,  193,  811,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193, 1069,  193,  193,  193,
      193,  862,  810,  813,  193,  193,  193,  193,  814,  193,

      812, 1069,  811,  193,  193,  193,  193,  193,  193,  193,
      193,  193, 1069,  193,  193,  193,  815, 1069,  193,  193,
      813, 1069,  193,  193,  193,  814,  193, 1069,  193, 1069,
      193,  193,  816,  193,  193, 1069,  193,  817,  819,  193,
      193,  818,  193,  815,  193,  193,  193,  193,  193,  820,
      193,  193,  193,  193,  821,  193,  193,  193, 1069,  816,
      193, 1069,  193,  193,  817,  819,  193,  193,  818,  863,
      193,  193,  193,  193,  193,  193,  820,  193,  193,  193,
      193,  821,  193,  193,  193,  822,  193,  824,  193,  193,
      193,  864, 1069,  823,  193, 1069,  863,  193,  193,  193,

      193,  193,  825,  826,  193,  193,  193,  193,  193,  193,
     1069,  193,  822,  193,  824,  193,  193,  193,  864,  827,
      823,  193,  830, 1069,  828,  193, 1069,  193,  193,  825,
      826,  193, 1069,  193,  193,  193,  193,  829,  193,  193,
      831,  865,  193,  193, 1069, 1069,  827,  193,  193,  830,
      193,  828,  193,  193,  193,  866,  867, 1069,  193,  193,
     1069,  833, 1069,  193,  829,  832,  193,  831,  865,  193,
      193,  834,  193,  193,  193,  193,  193,  193, 1069,  193,
      193,  835,  866,  867,  836,  193,  193,  839,  833,  193,
      193, 1069,  832,  193,  868,  193,  193,  193,  834,  193,

      193, 1069,  193,  193,  838,  193,  837,  193,  835,  193,
      193,  836,  193,  193,  839,  840,  193,  193,  193,  193,
      193,  868,  193,  193,  843, 1069, 1069,  193,  841,  869,
      845,  838,  193,  837,  193, 1069,  193,  193,  193,  193,
      193,  842,  840,  193,  193,  193,  193,  193, 1069,  193,
      193,  843,  193,  844,  193,  841,  869,  845,  193, 1069,
     1069,  193,  846,  193,  193,  193,  193,  193,  842,  193,
      193,  193,  193,  193,  193,  847,  193,  193,  193,  193,
      844,  193,  852,  193,  193,  193,  193,  848,  193,  846,
      193,  193,  850,  193,  193,  849,  193,  193,  855,  193,

      193,  193,  847,  193, 1069,  193,  193,  193,  193,  852,
      193,  193,  193,  193,  848,  856,  853,  193,  193,  850,
      193,  193,  849,  851,  193,  855,  193,  193,  193,  193,
      193,  854,  193,  193,  193,  193,  870,  193,  871,  193,
      858,  193,  856,  853,  193,  193,  193,  872,  193,  193,
      851,  857,  193,  193,  193,  193,  193,  193,  854,  193,
      193,  193,  193,  870,  193,  871,  873,  858,  193,  874,
      875,  876,  193,  193,  872,  877,  193,  878,  857,  193,
      879,  880,  193,  881,  193,  882,  883,  193,  193,  884,
      885,  886,  887,  873,  888,  889,  874,  875,  876,  193,

      890,  891,  877,  892,  878,  893,  894,  879,  880,  895,
      881,  896,  882,  883,  897,  898,  884,  885,  886,  887,
      899,  888,  889,  900,  901,  902,  903,  890,  891,  904,
      892,  905,  893,  894,  906,  907,  895,  908,  896,  909,
      910,  897,  898,  911,  912,  193, 1069,  899,  193,  193,
      900,  901,  902,  903,  914, 1069,  904,  193,  905,  193,
      915,  906,  907,  967,  908,  193,  909,  910,  193,  193,
      911,  912,  193,  920,  193,  193,  193,  193,  913,  193,
      193,  914,  916,  193,  193, 1069,  193,  915,  193, 1069,
      967, 1069,  193,  193,  193,  193,  193,  917,  193, 1069,

      920,  193,  193,  193,  193,  913,  193,  193,  193,  916,
      193,  923,  919,  918,  193,  193,  193,  193,  193, 1069,
      193,  193,  193, 1069,  917,  193,  921,  193,  193,  193,
      193,  193,  924, 1069,  922,  193,  193,  193,  923,  919,
      918,  193,  193,  193,  193,  193,  927,  193,  193,  193,
      928,  193,  193,  921,  193,  193, 1069,  925,  193,  924,
      926,  922,  193,  193,  193,  193,  193,  929,  193,  193,
      193,  193,  193,  927,  193,  193, 1069,  928,  193,  193,
      930,  933,  931,  193,  925,  193,  193,  926,  193,  193,
      932,  193,  193,  193,  929,  193,  193,  193,  193,  193,

      193,  968,  193,  193,  935,  193,  193,  930,  933,  931,
      193,  193,  193,  193,  193,  193,  193,  932,  193, 1069,
      193,  934,  193,  193,  193,  193,  193,  193,  968,  193,
      193,  935,  193,  193,  193,  193,  938, 1069,  193,  936,
      969,  193, 1069,  193,  193,  193,  193,  193,  934,  193,
      193,  193,  193,  193,  193,  193,  193, 1069,  193,  193,
      937,  193,  193,  938,  939,  193,  936,  969,  193,  193,
      193,  193,  193,  193,  193,  940, 1069,  193,  193,  193,
      941,  193,  193,  193,  193,  193,  193,  937,  193,  193,
      942,  939,  193,  193,  193,  193,  193,  193,  193,  193,

      193,  193,  940,  945,  193,  193,  193,  941,  944,  193,
     1069,  193,  943,  193,  193,  193,  193,  942,  193,  193,
      193,  193,  948,  193,  193,  193,  193,  193,  193,  193,
      945,  193,  949,  193,  193,  944,  193,  946, 1069,  943,
      193,  193,  193,  970,  193,  193,  193,  947,  193,  948,
      193,  193, 1069,  193,  193,  193,  193,  193,  950,  949,
      193,  193,  193,  951,  946,  952,  193,  193, 1069,  193,
      970,  193,  953, 1069,  947,  193, 1069,  193,  193,  955,
      193,  193,  193,  193,  193,  950,  193,  193,  193,  193,
      951,  957,  952,  193,  193,  954,  193,  193,  193,  953,

      193, 1069,  956,  193,  193,  193,  955,  959,  193,  193,
      193,  193,  958,  193,  193,  193,  193,  193,  957, 1069,
      193,  961,  954,  193,  193,  193,  963,  193,  960,  956,
      193,  193,  193, 1069,  959,  193,  962,  193,  193,  958,
      193,  193,  193,  193,  193,  971,  193,  193,  961,  972,
      965,  193,  193,  963,  193,  960,  964,  193,  193,  193,
      193,  966,  193,  962,  193,  193,  973,  193,  193,  193,
      974,  193,  971,  193,  193,  975,  972,  965,  193,  193,
      976,  193,  977,  964,  193,  193,  978,  193,  966,  193,
      979,  980,  193,  973,  981,  982,  983,  974,  193,  984,

      985,  193,  975,  986,  987,  988,  989,  976,  990,  977,
      991,  992,  193,  978,  993,  994,  995,  979,  980,  996,
      193,  981,  982,  983,  998,  193,  984,  985,  193, 1069,
      986,  987,  988,  989,  997,  990,  193,  991,  992,  193,
      193,  993,  994,  995,  193,  193,  996,  193,  193,  193,
      999,  998,  193,  193,  193,  193,  193, 1001, 1069,  193,
     1000,  997,  193,  193, 1069, 1003,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  999,  193,  193,
      193,  193,  193,  193, 1001, 1002,  193, 1000,  193,  193,
      193, 1004, 1003,  193,  193,  193,  193,  193,  193,  193,

      193,  193, 1005,  193, 1069,  193,  193,  193,  193,  193,
     1069,  193, 1002,  193,  193,  193, 1006,  193, 1004,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193, 1005,
      193,  193,  193,  193,  193,  193, 1009,  193,  193, 1007,
      193,  193,  193, 1006,  193, 1069,  193, 1069,  193,  193,
      193,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193, 1008,  193, 1009,  193,  193, 1007, 1069,  193,  193,
     1011,  193, 1010,  193,  193,  193,  193, 1025, 1013,  193,
      193, 1069,  193,  193,  193,  193,  193, 1069, 1008,  193,
     1026, 1012,  193,  193,  193,  193,  193, 1011,  193, 1010,

      193,  193, 1014,  193, 1025, 1013,  193,  193, 1015,  193,
      193, 1069,  193,  193, 1016, 1069,  193, 1026, 1012,  193,
      193,  193,  193,  193,  193,  193, 1069,  193,  193, 1014,
      193, 1069, 1069,  193,  193, 1015,  193,  193, 1017,  193,
      193, 1016,  193,  193,  193, 1069,  193, 1018,  193,  193,
      193,  193, 1019,  193,  193,  193,  193,  193, 1020, 1021,
      193,  193,  193,  193,  193, 1017,  193,  193, 1022,  193,
      193,  193,  193,  193, 1018,  193,  193,  193,  193, 1019,
      193,  193,  193,  193,  193, 1020, 1021,  193,  193,  193,
     1027,  193,  193,  193,  193, 1022, 1028,  193,  193,  193,

      193, 1024, 1029,  193, 1030,  193, 1023, 1031,  193,  193,
     1032,  193, 1033,  193,  193, 1034, 1035, 1027, 1036,  193,
      193,  193, 1069, 1028,  193,  193,  193,  193, 1024, 1029,
      193, 1030,  193, 1023, 1031,  193, 1069, 1032, 1038, 1033,
      193,  193, 1034, 1035,  193, 1036,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  193, 1037,  193,  193,  193,
      193,  193,  193, 1039,  193, 1038,  193, 1069,  193,  193,
     1040,  193,  193,  193,  193,  193,  193,  193,  193,  193,
      193,  193,  193, 1037,  193,  193,  193,  193,  193,  193,
     1039,  193,  193,  193, 1042,  193,  193, 1040,  193,  193,

      193, 1069, 1041,  193,  193,  193,  193,  193,  193,  193,
     1069,  193, 1044,  193,  193,  193,  193,  193, 1049,  193,
      193, 1042, 1069,  193,  193,  193,  193,  193, 1048, 1041,
      193,  193, 1043,  193,  193,  193,  193,  193,  193, 1044,
      193,  193,  193,  193,  193, 1049, 1046,  193,  193, 1047,
      193,  193,  193,  193,  193, 1048, 1045, 1050,  193, 1043,
      193,  193,  193,  193,  193,  193, 1051,  193, 1052, 1053,
      193, 1054,  193, 1046,  193,  193, 1047,  193, 1069,  193,
      193,  193,  193, 1045, 1050,  193,  193,  193,  193, 1055,
      193,  193,  193, 1051,  193, 1052, 1053,  193, 1054,  193,

      193,  193,  193, 1056,  193, 1057,  193,  193,  193,  193,
     1069,  193,  193,  193,  193,  193, 1055,  193,  193,  193,
      193,  193,  193, 1061,  193, 1062, 1060,  193, 1059,  193,
     1056, 1063, 1057,  193, 1058,  193, 1064,  193,  193,  193,
      193,  193,  193, 1069,  193,  193,  193,  193,  193,  193,
     1061,  193, 1062, 1060, 1067, 1059,  193,  193, 1063,  193,
     1065, 1058,  193, 1064,  193,  193,  193,  193,  193,  193,
      193,  193,  193,  193, 1069,  193,  193,  193,  193,  193,
     1066, 1067,  193,  193,  193, 1068,  193, 1065, 1069,  193,
      193, 1069,  193,  193, 1069,  193,  193,  193,  193, 1069,

     1069, 1069, 1069,  193,  193, 1069,  193, 1066, 1069,  193,
     1069, 1069, 1068, 1069, 1069, 1069, 1069,  193, 1069, 1069,
     1069, 1069, 1069,  193,   46,   46,   46,   46,   46,   88,
     1069, 1069,   88,   88,  179,  179,  179, 1069,  179,  181,
     1069,  181,  181,  181,  184, 1069,  184,  184,  184,  193,
     1069,  193,  193,  193,    7, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,

     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069
    } ;

static const flex_int16_t yy_chk[4323] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    9,    9,   10,   10,   15, 1072,
       15,   17,   17,   18,   18,   21,   22,   21,   24,  388,
       23,   30,   24,   21,  276,   21,   24,   23,   31,   21,
       21,   44,   24,   98,   23,   24,   22,   23,   23,   25,
      188,   25,   21,   22,   21,   24,   25,   23,   30,   24,
       21,   25,   21,   24,   23,   31,   21,   21,   44,   24,
       98,   23,   24,   22,   23,   23,   25,   28,   25,  187,

       27,   49,   49,   25,   42,   28,   27,  184,   25,   26,
       99,   28,   42,   50,   50,   57,   57,   26,   32,   55,
       26,   55,   32,   26,   28,  102,   26,   27,   32,   26,
       33,   42,   28,   27,   33,   29,   26,   99,   28,   42,
       33,   29,   29,   29,   26,   32,   92,   26,   29,   32,
       26,   34,  102,   26,   91,   32,   26,   33,   58,   58,
       88,   33,   29,   36,  103,   34,   71,   33,   29,   29,
       29,   34,   34,   35,   36,   29,   43,   43,   34,   38,
       36,   35,   39,   38,   39,   35,   71,   39,   35,   38,
       36,  103,   34,   71,   39,   39,   86,   86,   34,   34,

       35,   36,  107,   43,   43,   85,   38,   36,   35,   39,
       38,   39,   35,   71,   39,   35,   38,   90,   90,   67,
      100,   39,   39,   40,   40,  110,   67,   40,  100,  107,
       40,   40,   67,   41,  114,   41,   60,   40,   41,   67,
       40,  182,  182,   77,  186,  186,   67,  100,   59,   56,
       40,   40,  110,   67,   40,  100,   52,   40,   40,   67,
       41,  114,   41,   77,   40,   41,   67,   40,   61,   61,
       77,   61,   61,   61,   61,   61,   61,   68,   61,   61,
       61,   68,   84,   70,   61,   68,   61,  115,  106,  116,
       77,   68,   61,   70,   61,  106,  109,  101,   61,   61,

      101,   68,   84,   70,   68,  117,  109,   51,   68,   84,
       70,   61,   68,   61,  115,  106,  116,   47,   68,   61,
       70,   61,  106,  109,  101,   61,   61,  101,   68,   84,
       70,   45,  117,  109,   61,   62,   62,   20,   62,   62,
       62,   62,   62,   62,   72,   62,   62,   62,   72,   73,
       19,   16,   62,   73,   72,  111,   11,  118,   78,   73,
      111,  120,   78,    7,   72,  121,   76,  122,   78,   73,
       76,   72,   62,  123,    4,   72,   73,   76,   78,   62,
       73,   72,  111,   76,  118,   78,   73,  111,  120,   78,
       76,   72,  121,   76,  122,   78,   73,   76,    3,   62,

      123,   62,   63,  124,   76,   78,   63,    0,  125,   63,
       76,    0,  113,  113,   81,  126,   63,   76,   83,   63,
       63,   83,   83,   81,  127,   81,   63,    0,   81,   63,
      124,    0,  129,   63,   81,  125,   63,    0,   83,  113,
      113,   81,  126,   63,    0,   83,   63,   63,   83,   83,
       81,  127,   81,   63,   64,   81,   82,  130,   64,  129,
       82,   81,   64,    0,   82,   83,  128,  132,   64,  128,
      133,   64,  108,  108,  108,  135,  104,  104,   64,    0,
       82,   64,  136,   82,  130,   64,    0,   82,    0,   64,
      104,   82,  137,  128,  132,   64,  128,  133,   64,  108,

      108,  108,  135,  104,  104,   64,   65,   82,  134,  136,
      138,  112,  139,   65,  139,   65,  112,  104,  134,  137,
       65,    0,  112,  134,  134,   65,   65,    0,  141,  112,
      142,    0,    0,   65,  143,  134,  144,  138,  112,  139,
       65,  139,   65,  112,    0,  134,  140,   65,  140,  112,
      134,  134,   65,   65,   66,  141,  112,  142,   66,  140,
      145,  143,   66,  144,  146,   66,  147,  148,   66,  150,
      151,   66,  152,  140,   66,  140,  153,    0,   66,    0,
        0,   66,  156,  157,    0,   66,  140,  145,    0,   66,
      158,  146,   66,  147,  148,   66,  150,  151,   66,  152,

      154,   66,  160,  153,  154,   66,   69,   69,  161,  156,
      157,  155,  162,   69,   69,   69,  155,  158,    0,  119,
       69,  119,  163,  164,  166,  119,   69,  154,  159,  160,
      167,  154,  119,   69,   69,  161,  119,  159,  155,  162,
       69,   69,   69,  155,  168,  159,  119,   69,  119,  163,
      164,  166,  119,   69,   74,  159,  165,  167,   74,  119,
      171,  172,  169,  119,  159,  175,  170,  165,   74,  170,
      173,  168,  159,  174,   74,   74,  173,  176,   74,    0,
        0,   74,  169,  165,  177,   74,  174,  171,  172,  169,
      193,  278,  175,  170,  165,   74,  170,  173,  280,    0,

      174,   74,   74,  173,  176,   74,   75,   75,  195,  169,
      193,  177,  281,  174,    0,   75,  201,  193,  278,   75,
      194,  194,   75,  195,  283,  280,   75,    0,  195,    0,
        0,    0,    0,   75,   75,  195,  201,  193,    0,  281,
        0,  194,   75,  201,  198,  196,   75,  194,  194,   75,
      195,  283,  196,   75,   79,  195,   79,  198,  197,   79,
      196,  197,  197,  201,  198,  196,   79,   79,  194,  285,
      205,  198,  196,  199,  286,  199,   79,    0,    0,  196,
      205,   79,  197,   79,  198,  197,   79,  196,  197,  197,
      205,  198,  196,   79,   79,  199,  285,  205,  287,  202,

      199,  286,  199,   79,   80,   80,  202,  205,   80,  197,
      288,   80,   80,  202,  200,  200,  200,  205,   80,  202,
      203,   80,  199,    0,  203,  287,  202,  290,   80,  200,
        0,   80,   80,  202,  200,   80,    0,  288,   80,   80,
      202,  200,  200,  200,  203,   80,  202,  203,   80,  206,
      204,  203,  207,  291,  290,   80,  200,  204,  204,  204,
        0,  200,  213,  213,  292,    0,  206,  207,  209,  206,
      204,  203,  207,    0,  293,    0,  206,  204,    0,  207,
      291,  209,  209,  213,  204,  204,  204,  210,  209,  213,
      213,  292,  211,  206,  207,  209,  206,  204,  294,  207,

      208,  293,  211,  210,  208,  208,  212,  210,  209,  209,
      213,  208,  211,  295,  210,  209,    0,  297,  208,  211,
      212,  214,    0,  214,  208,  294,  212,  208,    0,  211,
      210,  208,  208,  212,  210,  216,  219,    0,  208,  211,
      295,    0,  216,  214,  297,  208,    0,  212,  214,  219,
      214,  208,  217,  212,  218,  216,  219,    0,  220,  217,
      221,    0,  216,  219,  218,    0,    0,  221,  220,  216,
      214,  215,  217,  215,  218,    0,  219,  215,  220,  217,
      221,  218,  216,  219,  215,  220,  217,  221,  215,    0,
        0,  218,  222,  215,  221,  220,  223,  299,  215,  217,

      215,  218,  222,    0,  215,  220,  223,  221,  224,    0,
        0,  215,  222,    0,  226,  215,  223,  225,  227,  222,
      215,  300,  224,  223,  299,  224,  225,  228,  224,  222,
      226,  228,    0,  223,  226,  224,  233,  225,  227,  222,
      229,  226,    0,  223,  225,  227,    0,  228,  300,  224,
      231,  229,  224,  225,  228,  224,  233,  226,  228,  231,
      229,  226,    0,  233,  225,  227,    0,  229,    0,  301,
      231,    0,  234,  234,  228,  232,    0,  231,  229,  232,
        0,  302,    0,  233,  301,  235,  231,  229,  230,  230,
      303,  235,  234,  235,  237,  232,  301,  231,  230,  234,

      234,    0,  232,  230,  230,  235,  232,  237,  302,  230,
        0,  301,  235,  304,  237,  230,  230,  303,  235,  234,
      235,  237,  232,  305,  236,  230,  236,  240,  236,  238,
      230,  230,  235,    0,  237,    0,  230,  236,  238,    0,
      304,  237,  240,  239,    0,    0,  241,  240,  236,  238,
      305,  236,  239,  236,  240,  236,  238,  245,  243,    0,
      242,  241,  243,  239,  236,  238,  241,  242,    0,  240,
      239,  244,  244,  241,  240,  236,  238,  245,    0,  239,
      242,  306,  243,    0,  245,  243,  247,  242,  241,  243,
      239,  244,  248,  241,  242,  246,  246,  307,  244,  244,

      252,  247,  252,  309,  245,  248,  247,  242,  306,  243,
      249,  250,  248,  247,  249,  250,  246,    0,  244,  248,
      252,    0,  246,  246,  307,  310,  251,  252,  247,  252,
      309,  250,  248,  247,  249,  251,  257,  249,  250,  248,
      251,  249,  250,  246,  253,  254,  251,  252,  254,  257,
      256,  253,  310,  251,    0,    0,  257,  255,  250,  255,
      256,  249,  251,  257,  253,  254,  255,  251,    0,  311,
      256,  253,  254,  251,  255,  254,  257,  256,  253,  255,
      261,  258,  260,  257,  255,  258,  255,  256,  261,  260,
      262,  253,  254,  255,    0,  259,  311,  256,  259,  261,

      261,  255,  260,  263,  312,  258,  255,  261,  258,  260,
      262,  263,  258,  264,    0,  261,  260,  262,  259,  313,
      267,  267,  259,  263,  264,  259,  261,  261,    0,  260,
      263,  312,  258,  264,  289,  265,  289,  262,  263,  265,
      264,  267,    0,    0,    0,  259,  313,  267,  267,  266,
      263,  264,  270,  266,  268,  265,  266,  269,  268,  265,
      264,  289,  265,  289,  269,  270,  265,  271,  267,  266,
      269,  273,  270,  272,  268,  273,  266,  269,  314,  270,
      266,  268,  265,  266,  269,  268,  265,  271,  272,  315,
      316,  269,  270,  272,  271,  273,  266,  269,  273,  270,

      272,  268,  273,  317,  269,  314,  319,  320,  321,  322,
      323,  324,  325,  326,  271,  272,  315,  316,  327,  328,
      272,  329,  273,  330,  331,  333,  334,  336,  337,  338,
      317,  332,  339,  319,  320,  321,  322,  323,  324,  325,
      326,  332,  340,  341,  342,  327,  328,  343,  329,  344,
      330,  331,  333,  334,  336,  337,  338,  345,  332,  339,
      347,  348,  349,  350,  351,  352,  353,  354,  332,  340,
      341,  342,  355,  356,  343,  357,  344,  358,  359,  360,
      361,  362,  364,  365,  345,  366,  367,  347,  348,  349,
      350,  351,  352,  353,  354,  369,  370,  371,  372,  355,

      356,  374,  357,  377,  358,  359,  360,  361,  362,  364,
      365,  375,  366,  367,  376,  378,  376,  379,  380,  381,
      375,  382,  369,  370,  371,  372,  383,  384,  374,  385,
      377,  384,  386,    0,    0,  389,    0,  390,  375,  499,
      391,  376,  378,  376,  379,  380,  381,  375,  382,  392,
      394,    0,  396,  383,  384,  389,  385,  390,  384,  386,
      391,  393,  389,  397,  390,  408,  499,  391,  393,  392,
      394,    0,  396,  397,  395,    0,  392,  394,  395,  396,
        0,  393,  389,  397,  390,  408,  399,  391,  393,  398,
      397,    0,  408,  398,  500,  393,  392,  394,  395,  396,

      397,  395,  403,  404,  399,  395,  399,  400,  393,  398,
      397,  404,  408,  399,  400,  401,  398,  401,  403,  402,
      398,  500,  403,  404,    0,  395,    0,  400,  405,  403,
      404,  399,  402,  399,  400,    0,  398,  401,  404,  402,
        0,  400,  401,  405,  401,  403,  402,  406,  405,  403,
      404,  406,  409,  407,  400,  405,  410,    0,  412,  402,
        0,  411,  412,    0,  401,    0,  402,  407,  411,    0,
      405,  406,  409,  407,  406,  405,  410,  413,  406,  409,
      407,  411,  412,  410,  414,  412,  414,  415,  411,  412,
      416,    0,  413,  417,  407,  411,  417,  413,  406,  409,

      407,  418,  419,  410,  413,  416,  414,  415,  411,  412,
      416,  414,  418,  414,  415,  420,  417,  416,  422,  413,
      417,  418,  419,  417,  413,  423,  421,  423,  418,  419,
      421,  501,  416,  414,  415,  420,  502,  416,  422,  418,
      428,  424,  420,  417,  425,  422,  426,  423,  418,  419,
      421,  425,  423,  421,  423,  424,  427,  421,  501,  426,
      428,  424,  420,  502,  425,  422,  426,  428,  424,  430,
      427,  425,    0,  426,  423,  429,  427,  421,  425,  429,
        0,  503,  424,  427,  431,    0,  426,  428,  424,  430,
        0,  425,  431,  426,  432,  433,  430,  427,  433,  429,

        0,  432,  429,  427,  431,  504,  429,  434,  503,  435,
      505,  431,  435,  436,  432,  437,  430,  436,  433,  431,
        0,  432,  433,  434,    0,  433,  429,  434,  432,  435,
      437,  431,  504,  436,  434,  437,  435,  505,  438,  435,
      436,  432,  437,  439,  436,  433,  441,  442,  443,  439,
      434,  438,    0,    0,  434,    0,  435,  437,  438,  440,
      436,  444,  437,  439,  445,  438,  441,  442,  443,  440,
      439,  444,  507,  441,  442,  443,  439,  447,  438,  440,
      445,  444,  449,  446,  445,  438,  440,    0,  444,  510,
      439,  445,  446,  441,  442,  443,  440,  447,  444,  507,

      448,  450,  449,  446,  447,  450,  440,  445,  444,  449,
      446,  445,  451,  451,  452,  448,  510,    0,  452,  446,
      448,  450,  511,  453,  447,  453,    0,  448,  450,  449,
      446,  512,  450,  451,  454,  455,  454,    0,  452,  451,
      451,  452,  448,  453,  456,  452,    0,  448,  450,  511,
      453,  455,  453,  457,  454,  455,  458,  462,  512,  456,
      451,  454,  455,  454,  456,  452,    0,  459,    0,  457,
      453,  456,  460,  457,  459,  461,  458,  462,  455,  513,
      457,  454,  455,  458,  462,  460,  456,  459,  463,  461,
        0,  456,  460,  464,  459,  461,  457,  464,  465,  460,

      457,  459,  461,  458,  462,  468,  513,  465,  463,  468,
      466,  514,  460,  469,  459,  463,  461,  464,  465,  460,
      464,  466,  461,  467,  464,  465,  472,    0,  469,  468,
      466,  467,  468,  469,  465,  463,  468,  466,  514,  470,
      469,  473,  470,  467,  464,  465,  472,  471,  466,    0,
      467,  473,  474,  472,  471,  469,  468,  466,  467,  470,
      469,  473,  475,    0,    0,  476,  470,  471,  473,  470,
      467,  516,  474,  472,  471,  477,  478,  479,  473,  474,
      480,  471,  475,  476,  479,  476,  470,    0,  473,  475,
      477,  478,  476,  482,  471,  477,  478,  479,  516,  474,

      480,  484,  477,  478,  479,  481,  483,  480,  482,  475,
      476,  479,  476,  482,  485,  483,  481,  477,  478,  517,
      482,  484,  477,  478,  479,  481,  483,  480,  484,  486,
      487,    0,  481,  483,  485,  482,    0,    0,  486,  487,
      482,  485,  483,  481,  489,  518,  517,  492,  484,  486,
      487,    0,  481,  483,  489,  490,  486,  487,  488,  490,
      491,  485,  519,  492,  489,  486,  487,  492,  488,  491,
      488,  489,  518,    0,  492,  520,  486,  487,  488,  490,
      491,  489,  490,  494,  495,  488,  490,  491,    0,  519,
      492,  489,  521,    0,  492,  488,  491,  488,  493,  495,

      493,  494,  520,  494,  495,  488,  490,  491,  522,  496,
      494,  495,  497,  523,    0,  497,  526,  527,  496,  521,
      493,  498,  496,  528,  529,  493,  495,  493,  494,  496,
      494,  495,  497,  530,  498,  522,  496,  531,  532,  497,
      523,  498,  497,  526,  527,  496,  534,  493,  498,  496,
      528,  529,  537,  538,  540,  543,  496,  544,  545,  497,
      530,  498,  546,  547,  531,  532,  548,  550,  498,  554,
      556,  558,  560,  534,  559,  559,  561,  548,  563,  537,
      538,  540,  543,  564,  544,  545,  565,  566,  567,  546,
      547,  569,  570,  548,  550,  571,  554,  556,  558,  560,

      572,  559,  559,  561,  548,  563,  573,  574,  575,  576,
      564,  577,  579,  565,  566,  567,  580,  581,  569,  570,
      582,  585,  571,  586,  588,  589,  590,  572,  591,  592,
      593,  594,  595,  573,  574,  575,  576,  597,  577,  579,
      599,  602,    0,  580,  581,  604,  605,  582,  585,  603,
      586,  588,  589,  590,  602,  591,  592,  593,  594,  595,
      707,  602,  603,    0,  597,  604,  605,  599,  602,  603,
      606,  607,  604,  605,  608,  609,  603,    0,    0,    0,
      607,  602,  610,  606,  611,  612,  610,  707,  602,  603,
      606,  607,  604,  605,  608,  609,  603,  606,  607,  614,

      613,  608,  609,  614,  611,  612,  610,  607,  613,  610,
      606,  611,  612,  610,  617,    0,  615,  606,  607,  614,
      613,  608,  609,    0,  616,  618,  614,  613,  617,  615,
      614,  611,  612,  610,  617,  613,  615,  620,    0,  616,
        0,  617,  619,  615,  616,  618,  614,  613,    0,  619,
      621,  616,  618,  620,  622,  617,  615,  620,  622,    0,
        0,  617,  619,  615,  620,  621,  616,  626,    0,  619,
      621,  616,  618,  623,  626,  625,  619,  621,  622,  625,
      620,  622,    0,    0,  620,  622,  623,  626,  624,  619,
      624,  627,  621,  623,  626,  625,  628,  621,    0,  709,

      623,  626,  625,  633,  711,  622,  625,  633,  629,  631,
      624,  627,    0,  623,  626,  624,  628,  624,  627,  629,
      623,  630,  625,  628,  632,  631,  709,  633,  629,  631,
      633,  711,  630,  635,  633,  629,  631,  624,  627,  632,
        0,  630,    0,  628,  632,  634,  629,  636,  630,  634,
      637,  632,  631,  635,  633,  629,  631,    0,  638,  630,
      635,  639,  641,  642,  712,  637,  632,  636,  630,  634,
      637,  632,  634,  641,  636,  640,  634,  637,  638,  640,
      635,  639,  641,  642,  643,  638,    0,  644,  639,  641,
      642,  712,  637,  643,  636,  645,  634,  637,  646,  640,

      641,    0,  640,  647,  643,  638,  640,  644,  639,  641,
      642,  643,    0,  648,  644,  645,  647,    0,  646,  652,
      643,    0,  645,  647,  649,  646,  640,    0,  650,    0,
      647,  643,  648,  648,  644,    0,  651,  649,  651,  652,
      648,  650,  645,  647,  649,  646,  652,  653,  650,  651,
      647,  649,  654,  655,  653,  650,  651,  656,    0,  648,
      648,    0,  658,  651,  649,  651,  652,  653,  650,  713,
      657,  649,  654,  655,  653,  650,  651,  656,  660,  654,
      655,  653,  658,  651,  656,  657,  659,  661,  662,  658,
      657,  714,    0,  659,  653,    0,  713,  657,  660,  654,

      655,  665,  662,  662,  656,  660,  659,  661,  662,  658,
        0,  664,  657,  659,  661,  662,  663,  657,  714,  663,
      659,  665,  667,    0,  664,  660,    0,  668,  665,  662,
      662,  664,    0,  659,  661,  662,  663,  666,  664,  666,
      668,  715,  667,  663,    0,    0,  663,  668,  665,  667,
      671,  664,  669,  670,  668,  716,  718,    0,  664,  666,
        0,  670,    0,  663,  666,  669,  666,  668,  715,  667,
      671,  672,  669,  670,  668,  672,  674,  671,    0,  669,
      670,  673,  716,  718,  674,  673,  666,  677,  670,  676,
      677,    0,  669,  675,  719,  672,  674,  671,  672,  669,

      670,    0,  672,  674,  676,  673,  675,  678,  673,  676,
      677,  674,  673,  675,  677,  678,  676,  677,  681,  679,
      675,  719,  672,  674,  682,    0,    0,  678,  679,  720,
      684,  676,  673,  675,  678,    0,  676,  677,  681,  679,
      675,  680,  678,  680,  682,  681,  679,  686,    0,  683,
      684,  682,  685,  683,  678,  679,  720,  684,  687,    0,
        0,  688,  685,  680,  690,  681,  679,  686,  680,  683,
      680,  682,  685,  689,  686,  688,  683,  684,  687,  685,
      683,  688,  694,  692,  690,  687,  694,  689,  688,  685,
      680,  690,  692,  689,  686,  691,  683,  691,  697,  685,

      689,  695,  688,  692,    0,  687,  694,  693,  688,  694,
      692,  690,  698,  694,  689,  698,  695,  691,  697,  692,
      689,  695,  691,  693,  691,  697,  699,  693,  695,  696,
      692,  696,  698,  694,  693,  700,  722,  701,  723,  698,
      702,  703,  698,  695,  691,  697,  699,  724,  695,  696,
      693,  700,  704,  699,  693,  700,  696,  701,  696,  698,
      702,  703,  700,  722,  701,  723,  725,  702,  703,  726,
      727,  728,  704,  699,  724,  729,  696,  730,  700,  704,
      731,  734,  700,  736,  701,  738,  741,  702,  703,  742,
      743,  744,  749,  725,  751,  752,  726,  727,  728,  704,

      753,  756,  729,  757,  730,  758,  759,  731,  734,  760,
      736,  762,  738,  741,  763,  764,  742,  743,  744,  749,
      765,  751,  752,  766,  767,  768,  769,  753,  756,  770,
      757,  771,  758,  759,  772,  774,  760,  775,  762,  776,
      778,  763,  764,  779,  780,  782,    0,  765,  783,  785,
      766,  767,  768,  769,  786,    0,  770,  784,  771,  787,
      788,  772,  774,  859,  775,  782,  776,  778,  783,  785,
      779,  780,  782,  793,  786,  783,  785,  784,  784,  787,
      788,  786,  789,  789,  784,    0,  787,  788,  790,    0,
      859,    0,  782,  793,  794,  783,  785,  790,  791,    0,

      793,  786,  792,  789,  784,  784,  787,  788,  790,  789,
      789,  797,  792,  791,  794,  790,  795,  798,  791,    0,
      793,  794,  792,    0,  790,  791,  795,  796,  799,  792,
      789,  797,  799,    0,  796,  790,  795,  798,  797,  792,
      791,  794,  800,  795,  798,  791,  802,  796,  799,  792,
      803,  801,  804,  795,  796,  799,    0,  800,  797,  799,
      801,  796,  800,  795,  798,  805,  802,  804,  806,  800,
      803,  801,  804,  802,  796,  799,    0,  803,  801,  804,
      805,  808,  806,  808,  800,  805,  807,  801,  806,  800,
      807,  809,  805,  802,  804,  806,  810,  803,  801,  804,

      812,  861,  813,  808,  813,  814,  807,  805,  808,  806,
      808,  809,  805,  807,  811,  806,  810,  807,  809,    0,
      812,  811,  813,  810,  815,  814,  816,  812,  861,  813,
      808,  813,  814,  807,  811,  817,  819,    0,  809,  815,
      862,  811,    0,  810,  815,  818,  816,  812,  811,  813,
      820,  815,  814,  816,  822,  817,  819,    0,  823,  824,
      818,  811,  817,  819,  820,  818,  815,  862,  821,  825,
      820,  815,  818,  816,  822,  821,    0,  820,  823,  824,
      826,  822,  817,  819,  827,  823,  824,  818,  821,  825,
      828,  820,  818,  830,  828,  821,  825,  820,  831,  832,

      826,  822,  821,  833,  827,  823,  824,  826,  830,  829,
        0,  827,  829,  830,  828,  821,  825,  828,  831,  832,
      830,  828,  836,  833,  834,  831,  832,  826,  837,  829,
      833,  827,  837,  838,  835,  830,  829,  834,    0,  829,
      830,  828,  836,  863,  834,  831,  832,  835,  837,  836,
      833,  834,    0,  838,  835,  837,  829,  842,  839,  837,
      838,  835,  839,  840,  834,  841,  841,  840,    0,  836,
      863,  834,  842,    0,  835,  837,    0,  842,  846,  844,
      838,  835,  839,  844,  842,  839,  841,  840,  845,  839,
      840,  846,  841,  841,  840,  843,  843,  847,  846,  842,

      850,    0,  845,  844,  842,  846,  844,  848,  845,  839,
      844,  848,  847,  841,  840,  845,  843,  847,  846,    0,
      850,  851,  843,  843,  847,  846,  853,  850,  849,  845,
      844,  848,  849,    0,  848,  845,  852,  852,  848,  847,
      854,  851,  855,  843,  847,  865,  853,  850,  851,  867,
      856,  858,  849,  853,  856,  849,  855,  852,  848,  849,
      854,  857,  855,  852,  852,  857,  868,  854,  851,  855,
      870,  858,  865,  853,  856,  872,  867,  856,  858,  849,
      876,  856,  878,  855,  852,  857,  879,  854,  857,  855,
      884,  885,  857,  868,  888,  889,  891,  870,  858,  892,

      893,  856,  872,  895,  896,  897,  901,  876,  903,  878,
      904,  905,  857,  879,  906,  911,  912,  884,  885,  913,
      914,  888,  889,  891,  916,  915,  892,  893,  918,    0,
      895,  896,  897,  901,  915,  903,  917,  904,  905,  913,
      914,  906,  911,  912,  916,  915,  913,  914,  918,  920,
      917,  916,  915,  919,  923,  918,  917,  921,    0,  921,
      919,  915,  925,  917,    0,  924,  913,  914,  924,  920,
      922,  916,  915,  919,  923,  918,  920,  917,  927,  921,
      919,  923,  925,  917,  921,  922,  921,  919,  924,  925,
      922,  926,  924,  926,  928,  924,  920,  922,  927,  929,

      919,  923,  930,  931,    0,  927,  921,  932,  934,  925,
        0,  935,  922,  926,  928,  924,  932,  922,  926,  929,
      926,  928,  930,  931,  933,  927,  929,  932,  934,  930,
      931,  935,  936,  937,  932,  934,  939,  940,  935,  933,
      926,  928,  941,  932,  933,    0,  929,    0,  938,  930,
      931,  933,  936,  937,  932,  934,  939,  940,  935,  936,
      937,  938,  941,  939,  940,  942,  933,    0,  938,  941,
      943,  933,  942,  944,  943,  938,  945,  972,  946,  936,
      937,    0,  947,  939,  940,  942,  948,    0,  938,  941,
      974,  945,  942,  944,  943,  938,  945,  943,  946,  942,

      944,  943,  947,  945,  972,  946,  948,  952,  949,  947,
      949,    0,  942,  948,  950,    0,  950,  974,  945,  953,
      944,  943,  954,  945,  951,  946,    0,  952,  956,  947,
      949,    0,    0,  948,  952,  949,  950,  949,  951,  953,
      955,  950,  954,  950,  951,    0,  953,  955,  956,  954,
      961,  951,  957,  960,  952,  956,  957,  949,  958,  959,
      955,  959,  958,  950,  962,  951,  953,  955,  960,  954,
      961,  951,  963,  960,  955,  956,  957,  961,  964,  957,
      960,  959,  958,  957,  962,  958,  959,  955,  959,  958,
      975,  962,  963,  965,  966,  960,  980,  961,  964,  963,

      960,  966,  982,  957,  983,  964,  965,  986,  959,  958,
      987,  962,  990,  965,  966,  991,  992,  975,  993,  963,
      965,  966,    0,  980,  996,  964,  997,  998,  966,  982,
      999,  983, 1000,  965,  986, 1002,    0,  987, 1003,  990,
      965,  966,  991,  992,  996,  993,  997,  998, 1004, 1005,
      999,  996, 1000,  997,  998, 1002, 1001,  999, 1003, 1000,
     1001, 1006, 1002, 1004, 1007, 1003, 1008,    0, 1004, 1005,
     1009,  996, 1009,  997,  998, 1004, 1005,  999, 1010, 1000,
     1001, 1006, 1002, 1001, 1007, 1003, 1008, 1001, 1006, 1011,
     1004, 1007, 1009, 1008, 1012, 1004, 1005, 1009, 1010, 1009,

     1013,    0, 1011, 1014, 1017, 1010, 1016, 1001, 1006, 1011,
        0, 1007, 1016, 1008, 1012, 1018, 1011, 1015, 1025, 1009,
     1013, 1012,    0, 1014, 1017, 1010, 1016, 1013, 1022, 1011,
     1014, 1017, 1015, 1016, 1021, 1018, 1011, 1015, 1020, 1016,
     1023, 1012, 1018, 1019, 1015, 1025, 1020, 1013, 1022, 1021,
     1014, 1017, 1024, 1016, 1021, 1022, 1019, 1028, 1020, 1015,
     1023, 1021, 1018, 1019, 1015, 1020, 1030, 1023, 1033, 1034,
     1019, 1035, 1024, 1020, 1037, 1022, 1021, 1038,    0, 1024,
     1039, 1021, 1041, 1019, 1028, 1020, 1043, 1023, 1040, 1037,
     1019, 1044, 1042, 1030, 1037, 1033, 1034, 1038, 1035, 1024,

     1039, 1037, 1041, 1040, 1038, 1042, 1043, 1039, 1040, 1041,
        0, 1044, 1042, 1043, 1045, 1040, 1037, 1046, 1044, 1042,
     1048, 1037, 1047, 1049, 1038, 1051, 1047, 1039, 1046, 1041,
     1040, 1054, 1042, 1043, 1045, 1040, 1055, 1046, 1044, 1042,
     1048, 1045, 1047,    0, 1046, 1056, 1057, 1048, 1058, 1047,
     1049, 1059, 1051, 1047, 1063, 1046, 1055, 1064, 1054, 1065,
     1057, 1045, 1068, 1055, 1046, 1056, 1057, 1048, 1058, 1047,
     1060, 1059, 1056, 1057,    0, 1058, 1066, 1064, 1059, 1065,
     1060, 1063, 1068, 1055, 1064, 1066, 1065, 1057,    0, 1068,
     1060,    0, 1056, 1057,    0, 1058, 1066, 1060, 1059,    0,

        0,    0,    0, 1066, 1064,    0, 1065, 1060,    0, 1068,
        0,    0, 1066,    0,    0,    0,    0, 1060,    0,    0,
        0,    0,    0, 1066, 1070, 1070, 1070, 1070, 1070, 1071,
        0,    0, 1071, 1071, 1073, 1073, 1073,    0, 1073, 1074,
        0, 1074, 1074, 1074, 1075,    0, 1075, 1075, 1075, 1076,
        0, 1076, 1076, 1076, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,

     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 1980 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1994 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2281 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1070 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1069 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 146:
#line 210 "flex_lexer.l"
case 147:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 231 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 153:
/* rule 153 can match eol */
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 235 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 240 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3132 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1070 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1070 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1069);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 240 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

